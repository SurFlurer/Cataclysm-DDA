name: CNK Multi Release

on:
#  push:
#  workflow_run:
#    workflows: [Sync Fork]
#    types:
#      - completed
  workflow_dispatch:
#  schedule:
#    - cron: '50 4 * * *' # 每3小时触发, 对于一些更新不那么频繁的项目可以设置为每天一次, 低碳一点
    
concurrency: 
  group: cnk-release
  cancel-in-progress: true
  
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      timestamp: ${{ steps.get-timestamp.outputs.time }}
    steps:
      - name: Get build timestamp
        id: get-timestamp
        run: |
          echo "time=$(/bin/date -u "+%Y-%m-%d-%H%M")" >> $GITHUB_OUTPUT
      - name: Generate environmental variables
        id: generate_env_vars
        run: |
          echo "tag_name=cdda-experimental-${{ steps.get-timestamp.outputs.time }}" >> $GITHUB_OUTPUT
          echo "release_name=Cataclysm-DDA experimental build ${{ steps.get-timestamp.outputs.time }}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - run: |
          gh release create ${{ steps.generate_env_vars.outputs.tag_name }} --generate-notes --prerelease --title "${{ steps.generate_env_vars.outputs.release_name }}"
  builds:
    needs: release
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows Tiles x64 MSVC
            artifact: windows-with-graphics-x64
            arch: x64
            os: windows-2019
            mxe: none
            ext: zip
            content: application/zip
            sound: 0
          #- name: Linux Tiles x64
          #  os: ubuntu-20.04
          #  mxe: none
          #  android: none
          #  libbacktrace: 1
          #  tiles: 1
          #  sound: 0
          #  artifact: linux-with-graphics-x64
          #  ext: tar.gz
          #  content: application/gzip
          #- name: Android x64
          #  os: ubuntu-latest
          #  mxe: none
          #  android: arm64
          #  artifact: android-x64
          #  ext: apk
          #  content: application/apk
          #- name: Android x64 Sound
          #  os: ubuntu-latest
          #  mxe: none
          #  sound: 1
          #  android: arm64
          #  artifact: android-sound-x64
          #  ext: apk
          #  content: application/apk
          #- name: macOS Tiles Universal Binary (x64 and arm64)
          #  os: macos-12
          #  mxe: none
          #  tiles: 1
          #  sound: 0
          #  artifact: osx-tiles-universal
          #  ext: dmg
          #  content: application/x-apple-diskimage
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    permissions: write-all
    env:
        ZSTD_CLEVEL: 17
    steps:
      - uses: actions/checkout@v4
#        with:
#          ref: 'cdda-experimental-2023-03-07-0219'
      - name: Get soundpack
        if: matrix.sound == 1
        run: |
          git clone --depth=1 --shallow-submodules --recurse-submodules https://github.com/Fris0uman/CDDA-Soundpacks '${{ github.workspace }}/CDDA-Soundpacks'
          mv '${{ github.workspace }}/CDDA-Soundpacks/sound/CC-Sounds' '${{ github.workspace }}/data/sound'
      - name: Install dependencies (windows msvc) (0/4)
        if: runner.os == 'Windows'
        uses: lukka/get-cmake@latest
      - name: Install dependencies (windows msvc) (1/4)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2
      - name: Install dependencies (windows msvc) (2/4)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ runner.workspace }}/b/vcpkg'
          vcpkgGitCommitId: '3b57fb2e1ff55613db14d2aaf0a30529289c7050'
      - name: Install dependencies (windows msvc) (3/4)
        if: runner.os == 'Windows'
        run: |
          vcpkg integrate install --vcpkg-root '${{ runner.workspace }}\b\vcpkg'
      - name: Install dependencies (windows msvc) (4/4)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: >-
            gettext
            make
      - name: Install dependencies (windows mxe)
        if: matrix.mxe != 'none'
        run: |
          sudo apt install gettext
      - name: Install MXE
        if: matrix.mxe != 'none'
        run: |
          curl -L -o mxe-${{ matrix.mxe }}.tar.xz https://github.com/BrettDong/MXE-GCC/releases/download/mxe-sdl-2-0-20/mxe-${{ matrix.mxe }}.tar.xz
          curl -L -o mxe-${{ matrix.mxe }}.tar.xz.sha256 https://github.com/BrettDong/MXE-GCC/releases/download/mxe-sdl-2-0-20/mxe-${{ matrix.mxe }}.tar.xz.sha256
          shasum -a 256 -c ./mxe-${{ matrix.mxe }}.tar.xz.sha256
          sudo tar xJf mxe-${{ matrix.mxe }}.tar.xz -C /opt
          curl -L -o SDL2-devel-2.26.2-mingw.tar.gz https://github.com/libsdl-org/SDL/releases/download/release-2.26.2/SDL2-devel-2.26.2-mingw.tar.gz
          shasum -a 256 -c ./build-scripts/SDL2-devel-2.26.2-mingw.tar.gz.sha256
          sudo tar -xzf SDL2-devel-2.26.2-mingw.tar.gz -C /opt/mxe/usr/${{ matrix.mxe }}-w64-mingw32.static.gcc12 --strip-components=2 SDL2-2.26.2/${{ matrix.mxe }}-w64-mingw32
          curl -L -o libbacktrace-${{ matrix.mxe }}-w64-mingw32.tar.gz https://github.com/Qrox/libbacktrace/releases/download/2020-01-03/libbacktrace-${{ matrix.mxe }}-w64-mingw32.tar.gz
          shasum -a 256 -c ./build-scripts/libbacktrace-${{ matrix.mxe }}-w64-mingw32-sha256
          sudo tar -xzf libbacktrace-${{ matrix.mxe }}-w64-mingw32.tar.gz --exclude=LICENSE -C /opt/mxe/usr/${{ matrix.mxe }}-w64-mingw32.static.gcc12
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux' && matrix.mxe == 'none' && matrix.android == 'none' 
        run: |
          sudo apt-get update
          sudo apt-get install libsdl2-dev
          git clone https://github.com/libsdl-org/SDL.git --branch release-2.0.20 --depth 1
          cd SDL
          mkdir build
          cd build
          ../configure
          make -j$((`nproc`+0))
          sudo make install
          cp ../LICENSE.txt ${{ github.workspace }}/LICENSE-SDL.txt
          sudo apt-get install libncursesw5-dev libsdl2-ttf-dev libsdl2-image-dev \
            libsdl2-mixer-dev libpulse-dev ccache gettext parallel
          sudo apt-get install unzip
      - name: Install runtime dependencies (mac)
        if: runner.os == 'macOS'
        uses: BrettDong/setup-sdl2-frameworks@v1
        with:
          sdl2: latest
          sdl2-ttf: latest
          sdl2-image: latest
          sdl2-mixer: latest
      - name: Install build dependencies (mac)
        if: runner.os == 'macOS'
        run: |
          HOMEBREW_NO_AUTO_UPDATE=yes HOMEBREW_NO_INSTALL_CLEANUP=yes brew install unzip
          HOMEBREW_NO_AUTO_UPDATE=yes HOMEBREW_NO_INSTALL_CLEANUP=yes brew install gettext ccache parallel dylibbundler
          pip3 install dmgbuild biplist
      - name: install macports (mac)
        if: runner.os == 'macOS' && matrix.tiles == 1
        uses: melusina-org/setup-macports@v1
        with:
          parameters: '.github/macports/macports.yml'
      #- name: cnk
      #  run: |
      #    curl -o '${{ github.workspace }}/Kenan-Modpack-Mod.zip' -L https://github.com/linonetwo/CDDA-Kenan-Modpack-Chinese/releases/download/2023-07-16-0935/Kenan-Modpack-Mod.zip
      #    unzip -q '${{ github.workspace }}/Kenan-Modpack-Mod.zip'
      #    mv '${{ github.workspace }}/Kenan-Modpack-Chinese/' '${{ github.workspace }}/data/mods/'
      - name: remove_tileset(win)
        if: runner.os == 'Windows'
        run: |
          del '${{ github.workspace }}\gfx\Altica\' -Recurse -Force
          del '${{ github.workspace }}\gfx\Ultica_iso\' -Recurse -Force
          del '${{ github.workspace }}\gfx\PenAndPaper\' -Recurse -Force
          del '${{ github.workspace }}\gfx\ChibiUltica\' -Recurse -Force
      - name: remove_mods(win)
        if: runner.os == 'Windows'
        run: |
          del '${{ github.workspace }}\data\mods\MA\' -Recurse -Force
      - name: apply_patch
        run: |
          git config --global user.email "runner@github.com"
          git config --global user.name "runner"
          git am '${{ github.workspace }}/msvc-full-features/0001-Revert-fix-pulping-being-too-fast.patch'
          git am '${{ github.workspace }}/msvc-full-features/0001-no-craft-message-in-iteminfo.patch'
          git am '${{ github.workspace }}/msvc-full-features/0001-Revert-load-all-of-the-user-s-chosen-font-files-as-f.patch'
          git am '${{ github.workspace }}/msvc-full-features/0001-Revert-Zombified-humans-are-still-humans.patch'
          git am '${{ github.workspace }}/msvc-full-features/0001-do-not-check-morale-consistency.patch'
      - name: udp (Linux)
        if: runner.os != 'Windows'
        run: |
         curl -o '${{ github.workspace }}/UndeadPeopleTileset-master.zip' -L https://github.com/Theawesomeboophis/UndeadPeopleTileset/archive/refs/heads/master.zip
          unzip -q '${{ github.workspace }}/UndeadPeopleTileset-master.zip'
          cp -r '${{ github.workspace }}/UndeadPeopleTileset-master/TILESETS/data' '${{ github.workspace }}'
          cp -r '${{ github.workspace }}/UndeadPeopleTileset-master/TILESETS/gfx' '${{ github.workspace }}'
      #- name: udp (Windows)
      #  if: runner.os == 'Windows'
      #  run: |
      #    curl -o '${{ github.workspace }}\UndeadPeopleTileset-master.zip' -L https://github.com/Theawesomeboophis/UndeadPeopleTileset/archive/refs/heads/master.zip
      #    unzip -q '${{ github.workspace }}\UndeadPeopleTileset-master.zip'
      #    mv '${{ github.workspace }}\UndeadPeopleTileset-master\TILESETS\data' '${{ github.workspace }}'
      #    mv '${{ github.workspace }}\UndeadPeopleTileset-master\TILESETS\gfx' '${{ github.workspace }}'
      #- name: MyRespectedModdersWork
      #  run: |
      #    git clone --depth=1 https://github.com/SurFlurer/MyRespectedModdersWork '${{ github.workspace }}/MyRespectedModdersWork'
      #    mv '${{ github.workspace }}/MyRespectedModdersWork/LastManBatttalion（cdda mod仅支持实验版）' '${{ github.workspace }}/data/mods/'
      #    mv '${{ github.workspace }}/MyRespectedModdersWork/配方回滚' '${{ github.workspace }}/data/mods/'
      - name: Create VERSION.TXT
        shell: bash
        run: |
          cat >VERSION.txt <<EOL
          build type: ${{ matrix.artifact }}
          build number: ${{ needs.release.outputs.timestamp }}
          commit sha: ${{ github.sha }}
          commit url: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
          EOL
      - name: Compile translations (windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          lang/compile_mo.sh zh_CN
      - name: Build libbacktrace
        if: matrix.libbacktrace == 1
        run: |
          git clone https://github.com/ianlancetaylor/libbacktrace.git
          cd libbacktrace
          git checkout 14818b7783eeb9a56c3f0fca78cefd3143f8c5f6
          ./configure
          make -j$((`nproc`+0))
          cp LICENSE ${{ github.workspace }}/LICENSE-libbacktrace.txt
          sudo make install
      - name: Build CDDA (linux)
        if: runner.os == 'Linux' && matrix.mxe == 'none' && matrix.android == 'none'
        run: |
          make -j$((`nproc`+0)) TILES=${{ matrix.tiles }} SOUND=${{ matrix.tiles }} RELEASE=1 LOCALIZE=1 LANGUAGES=zh_CN BACKTRACE=0 PCH=0 bindist
          mv cataclysmdda-0.I.tar.gz cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.tar.gz
      - name: Build CDDA (windows mxe)
        if: matrix.mxe != 'none'
        env:
          PLATFORM: /opt/mxe/usr/bin/${{ matrix.mxe }}-w64-mingw32.static.gcc12-
        run: |
          make -j$((`nproc`+0)) CROSS="${PLATFORM}" TILES=1 SOUND=1 RELEASE=1 LOCALIZE=1 LANGUAGES=all BACKTRACE=1 PCH=0 bindist
          mv cataclysmdda-0.I.zip cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.zip
      - name: Build CDDA (windows msvc)
        if: runner.os == 'Windows'
        env:
          # Enable pretty backtraces
          BACKTRACE: 0
          CDDA_RELEASE_BUILD: 1
          VCPKG_OVERLAY_TRIPLETS: ${{ github.workspace }}\.github\vcpkg_triplets
        run: |
          msbuild -m -p:Configuration=Release -p:Platform=${{ matrix.arch }} "-target:Cataclysm-vcpkg-static;JsonFormatter-vcpkg-static" msvc-full-features\Cataclysm-vcpkg-static.sln
          .\build-scripts\windist.ps1
          mv cataclysmdda-0.I.zip cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.zip
      - name: Build CDDA (osx)
        if: runner.os == 'macOS'
        run: |
          make -j3 TILES=${{ matrix.tiles }} SOUND=${{ matrix.tiles }} RELEASE=1 LOCALIZE=1 LANGUAGES=zh_CN BACKTRACE=0 PCH=0 USE_HOME_DIR=1 UNIVERSAL_BINARY=1 dmgdist
          mv Cataclysm.dmg cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.dmg
      - name: Set up JDK 8 (android)
        if: runner.os == 'Linux' && matrix.android != 'none' && matrix.mxe == 'none'
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'adopt'   
      - name: Setup Build and Dependencies (android)
        if: runner.os == 'Linux' && matrix.android != 'none' && matrix.mxe == 'none'
        run: |
          sudo apt-get update
          sudo apt-get install gettext          
      - name: Build CDDA (android)
        if: runner.os == 'Linux' && matrix.android != 'none' && matrix.mxe == 'none'
        working-directory: ./android
        run: | 
          echo "${{ secrets.KEYSTORE }}" > release.keystore.asc   
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSWORD }}" --batch release.keystore.asc > app/release.keystore 
          echo "${{ secrets.KEYSTORE_PROPERTIES }}" > keystore.properties.asc   
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSWORD }}" --batch keystore.properties.asc > keystore.properties
          export UPSTREAM_BUILD_NUMBER="$((11581 + ${{ github.run_number }}))"
          chmod +x gradlew
          if [ ${{ matrix.android }} = arm64 ]
          then
               ./gradlew -Pj=$((`nproc`+0)) -Pabi_arm_32=false assembleExperimentalRelease
               mv ./app/build/outputs/apk/experimental/release/*.apk ../cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.apk
          elif [ ${{ matrix.android }} = arm32 ]
          then
               ./gradlew -Pj=$((`nproc`+0)) -Pabi_arm_64=false assembleExperimentalRelease
               mv ./app/build/outputs/apk/experimental/release/*.apk ../cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.apk 
          elif [ ${{ matrix.android }} = bundle ]
          then
               ./gradlew -Pj=$((`nproc`+0)) bundleExperimentalRelease
               mv ./app/build/outputs/bundle/experimentalRelease/*.aab ../cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.aab     
          fi
      - run: |
          gh release upload cdda-experimental-${{ needs.release.outputs.timestamp }} cdda-${{ matrix.artifact }}-${{ needs.release.outputs.timestamp }}.${{ matrix.ext }}
